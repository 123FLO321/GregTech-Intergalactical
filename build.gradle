buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}


plugins {
    id 'maven-publish'
}

evaluationDependsOn(':version')

group = 'com.github.gregtech-intergalactical'

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

version = "${mod_version}"
group = 'com.github.gregtech-intergalactical'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/**'
            srcDirs += 'src/generated/resources'
            exclude '.cache'
            exclude 'Thumbs.db'
        }
    }
}

minecraft {
    mappings channel: 'snapshot', version: "${mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.markers', 'SCAN,REGISTRIES'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            mods {
                gti {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            mods {
                gti {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'gti', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')
            mods {
                gti {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    if (!System.env.RELEASE) {
        mavenLocal()
    } else {
        maven { url 'https://files.axelandre42.ovh/maven' }
    }

    maven { url 'http://dvs1.progwml6.com/files/maven' }
    maven { url 'https://modmaven.k-4u.nl' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation 'com.github.gregtech-intergalactical:antimatter:0.0.+'
    implementation 'org.apache.commons:commons-collections4:4.4'

    if (local_dev_dependancies.toBoolean()) {
        compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
        runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
    }
    else {
        compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
        runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
    }
}

jar {
    zip64 true
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        gti(MavenPublication) {
            artifact jar
        }
    }

    repositories {
        if (System.env.MAVEN_URL) {
            maven {
                url = System.env.MAVEN_URL

                if (System.env.MAVEN_USERNAME && System.env.MAVEN_PASSWORD) {
                    authentication {
                        basic(BasicAuthentication)
                    }

                    credentials {
                        username = System.env.USERNAME
                        password = System.env.PASSWORD
                    }
                }
            }
        }
    }
}

