buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        gradlePluginPortal()
        maven { url 'http://dvs1.progwml6.com/files/maven' }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

repositories {
    maven { url 'http://dvs1.progwml6.com/files/maven' }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '0.0.1'
group = 'com.github.gregtech-intergalactical' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'gti'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
//Print out JVM information so that we know what version is running. Extreamly useful for people to know when helping you.
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/**'
            srcDirs += 'src/generated/resources'
            exclude '.cache'
            exclude 'Thumbs.db'
        }
    }
}


minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: "${mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'DEBUG'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            //jvmArgs '-javaagent:/opt/JavaHot/hotswap-agent.jar -XX:TraceRedefineClasses=1'
            //Comment this if you aren't developing against antimatter locally.
            arg "-mixin.config=antimatter.mixins.json"
            environment 'MOD_CLASSES', "gti%%${project.file('build/resources/main')}:gti%%${project.file('build/classes/java/main')}:antimatter%%${project(':antimatter').file('build/resources/main')}:antimatter%%${project(':antimatter').file('build/classes/java/main')}:tesseract%%${project(':tesseract').file('build/resources/main')}:tesseract%%${project(':tesseract').file('build/classes/java/main')}"
            mods {
                gti {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'DEBUG'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            //jvmArgs '-javaagent:/opt/JavaHot/hotswap-agent.jar -XX:TraceRedefineClasses=1'
            //Comment this if you aren't developing against antimatter locally.
            arg "-mixin.config=antimatter.mixins.json"
            environment 'MOD_CLASSES', "gti%%${project.file('build/resources/main')}:gti%%${project.file('build/classes/java/main')}:antimatter%%${project(':antimatter').file('build/resources/main')}:antimatter%%${project(':antimatter').file('build/classes/java/main')}:tesseract%%${project(':tesseract').file('build/resources/main')}:tesseract%%${project(':tesseract').file('build/classes/java/main')}"

            mods {
                gti {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            environment 'MOD_CLASSES', "gti%%${project.file('build/resources/main')}:gti%%${project.file('build/classes/java/main')}:antimatter%%${project(':antimatter').file('build/resources/main')}:antimatter%%${project(':antimatter').file('build/classes/java/main')}:tesseract%%${project(':tesseract').file('build/resources/main')}:tesseract%%${project(':tesseract').file('build/classes/java/main')}"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'DEBUG'
            //jvmArgs '-javaagent:/opt/JavaHot/hotswap-agent.jar -XX:TraceRedefineClasses=1'
            //Comment this if you aren't developing against antimatter locally.
            arg "-mixin.config=antimatter.mixins.json"
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'gti', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                gti {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation 'org.apache.commons:commons-collections4:4.4'


    implementation project(':antimatter')
    compileOnly project(path: ':tesseract')

    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
//jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
//apply plugin: 'org.spongepowered.mixin'

//mixin {
//    add sourceSets.main, "antimatter.refmap.json"
//}


jar {
    zip64 true
}
