plugins {
    id 'dev.architectury.loom' version '0.11.0-SNAPSHOT'
    id 'maven-publish'
}

repositories {
    maven { url 'https://dvs1.progwml6.com/files/maven' }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    //Needed for intellij
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    //GT.
    maven { url 'https://jitpack.io' }
}
version = "${minecraft_version}-${mod_version}"
group = 'com.github.gregtech-intergalactical' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'GregTech-Intergalactical'
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

def isCI = System.getenv("GITHUB_ACTION")
def isRELEASE = System.getenv("GITHUB_RELEASE")
def gitHash() {
    String hash = System.getenv("GITHUB_SHA")
    if (hash != null) return hash.substring(0,8)
    return ""
}

boolean hasTesseract = findProject(':TesseractAPI') != null

if (hasTesseract) {
    println('TesseractAPI in local workspace')
}

boolean hasAntimatter = findProject(':AntimatterAPI') != null

if (hasTesseract) {
    println('AntimatterAPI in local workspace')
}

boolean isWorkspace = hasTesseract || hasAntimatter
if (isCI) {
    version = version + "-" + gitHash()
}

//Print out JVM information so that we know what version is running. Extreamly useful for people to know when helping you.
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))


sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/**'
            srcDirs += 'src/generated/resources'
            exclude '.cache'
            exclude 'Thumbs.db'
        }
    }
}

String getenv() {
    boolean vscode = gradle.startParameter.taskNames[0].equals("genVSCodeRuns")  || gradle.startParameter.taskNames[0].equals(":genVSCodeRuns")
    boolean hasAntimatter = findProject(':AntimatterAPI') != null
    boolean hasTesseract = findProject(':TesseractAPI') != null

    String resourcePath = vscode ? 'bin/main' : 'build/resources/main'
    String codePath = vscode ? 'bin/main' : 'build/classes/java/main'
    String s = "gregtech%%${project.file(resourcePath)}" + getPathSeparator() + "gregtech%%${project.file(codePath)}"
    if (hasAntimatter) {
        s += getPathSeparator() + "antimatter%%${project(':AntimatterAPI').file(resourcePath)}" + getPathSeparator() + "antimatter%%${project(':AntimatterAPI').file(codePath)}"
    }
    if (hasTesseract) {
        s += getPathSeparator() + "tesseract%%${project(':TesseractAPI').file(resourcePath)}" + getPathSeparator() + "tesseract%%${project(':TesseractAPI').file(codePath)}"
    }
    return s
}
import org.apache.tools.ant.taskdefs.condition.Os

def getPathSeparator() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return ";"
    }
    return ":"
}


loom{
    silentMojangMappingsLicense()
    forge {
        // specify the mixin configs used in this mod
        // this will be added to the jar manifest as well!

        // missing access transformers?
        // don't worry, you can still use them!
        // note that your AT *MUST* be located at
        // src/main/resources/META-INF/accesstransformer.cfg
        // to work as there is currently no config option to change this.
        // also, any names used in your access transformer will need to be
        // in SRG mapped ("func_" / "field_" with MCP class names) to work!
        // (both of these things may be subject to change in the future)

        // this will create a data generator configuration
        // that you can use to automatically generate assets and data
        // using architectury loom. Note that this currently *only* works
        // for forge projects made with architectury loom!
        dataGen {
            mod project.modid
        }

        launches {
            data {
                arg "--existing", file("src/main/resources").absolutePath
            }
        }
    }
}

/*minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "${mappings_version}", version: "${minecraft_version}"    
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            //Needed to boot.
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'DEBUG'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            //if (isVSTask())
            //    jvmArgs '-javaagent:/opt/JavaHot/hotswap-agent.jar -XX:TraceRedefineClasses=1'
            //Comment this if you aren't developing against antimatter locally.
            if (isWorkspace) {
                environment('MOD_CLASSES', this.getenv())
            }
            arg "-mixin.config=antimatter.mixins.json"
            arg "-mixin.config=tesseract.mixins.json"
            mods {
                gregtech {
                    source sourceSets.main
                }
                if (hasTesseract) {
                    tesseract {
                        source project(':TesseractAPI').sourceSets.main

                    }
                }
                if (hasAntimatter) {
                    antimatter {
                        source project(':AntimatterAPI').sourceSets.main
                    }
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'DEBUG'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            if (isWorkspace) {
                environment('MOD_CLASSES', this.getenv())
            }
            arg "-mixin.config=antimatter.mixins.json"
            arg "-mixin.config=tesseract.mixins.json"
            arg "-nogui"
            mods {
                gregtech {
                    source sourceSets.main
                }
                if (hasTesseract) {
                    tesseract {
                        source project(':TesseractAPI').sourceSets.main
                    }
                }
                if (hasAntimatter) {
                    antimatter {
                        source project(':AntimatterAPI').sourceSets.main
                    }
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'DEBUG'
            //jvmArgs '-javaagent:/opt/JavaHot/hotswap-agent.jar -XX:TraceRedefineClasses=1'
            //Comment this if you aren't developing against antimatter locally.
            arg "-mixin.config=antimatter.mixins.json"
            arg "-mixin.config=tesseract.mixins.json"
            //if (isVSTask())
            //    jvmArgs '-javaagent:/opt/JavaHot/hotswap-agent.jar'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'gregtech', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')
            if (isWorkspace) {
                environment('MOD_CLASSES', this.getenv())
            }
            mods {
                gregtech {
                    source sourceSets.main
                }
                if (hasTesseract) {
                    tesseract {
                        source project(':TesseractAPI').sourceSets.main
                    }
                }
                if (hasAntimatter) {
                    antimatter {
                        source project(':AntimatterAPI').sourceSets.main
                    }
                }
            }
        }
    }
}*/

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.officialMojangMappings()

    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    //GT related projects.
    if (hasAntimatter) {
        implementation project(path: ':AntimatterAPI')
    } else {
        //compileOnly sources jar.
        modImplementation("com.github.GregTech-Intergalactical:AntimatterAPI:${antimatter_version}")
    }
    if (hasTesseract) {
        implementation project(path: ':TesseractAPI')
    } else {
        modImplementation("com.github.GregTech-Intergalactical.TesseractAPI:TesseractAPI-forge:${tesseract_version}")
    }

    //JEI
    modCompileOnly("mezz.jei:jei-${jei_version}:api")
    modRuntimeOnly("mezz.jei:jei-${jei_version}")

  //  runtimeOnly fg.deobf("curse.maven:rhino-416294:${rhino_file}")
 //   runtimeOnly fg.deobf("curse.maven:architecturyforge-419699:${architectury_file}")
 //   runtimeOnly fg.deobf("curse.maven:kubejs-238086:${kubejs_file}")
    //runtimeOnly fg.deobf("curse.maven:top-245211:${top_file}")
}

if (isCI) {
    jar.finalizedBy('reobfJar')
    println("In CI mode")
}

jar {
    zip64 true
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "GregTech Intergalactical",
                "Specification-Version": project.version,
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "GregTech Intergalactical",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
//jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing

publishing {
    tasks.publish.dependsOn 'build', 'reobfJar'
    publications {
        mavenJava(MavenPublication) {
            //artifactId = archivesBaseName
            artifact jar
        }
    }
    repositories {
        if (isCI && isRELEASE) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/GregTech-Intergalactical/GregTech"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        } else {
            maven { url "file:///${project.projectDir}/mcmodsrepo"}
        }
    }
}

processResources {
    exclude('gtuassets1.14')
}
