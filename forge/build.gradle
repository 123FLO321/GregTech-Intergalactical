archivesBaseName = rootProject.archive_base_name
version = "${rootProject.minecraft_version}-${rootProject.mod_version}"

def isCI = System.getenv("GITHUB_ACTION")
def isRELEASE = System.getenv("GITHUB_RELEASE")

architectury {
    forge()
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/**'
            srcDirs += 'src/generated/resources'
            exclude '.cache'
            exclude 'Thumbs.db'
        }
    }

}

loom{
    forge {
        dataGen {
            mod project.modid
        }

        launches {
            data {
                arg "--existing", file("src/main/resources").absolutePath
            }
        }
    }
}


dependencies {
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    //implementation project(path: ":TesseractAPI")
    //GT
    implementation(project(path: ":tesseract-forge", configuration: "namedElements"))
    implementation(project(path: ":tesseract-common", configuration: "namedElements"))

    //MIXIN
    if (System.getProperty('idea.sync.active') != 'true') {
        annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'
    }

    implementation(project(path: ":antimatter-forge", configuration: "namedElements")){
        transitive = false;
    }
    implementation(project(path: ":antimatter-common", configuration: "namedElements")){
        transitive = false;
    }
    //JEI
    modCompileOnly("mezz.jei:jei-${jei_version}:api")
    modRuntimeOnly("mezz.jei:jei-${jei_version}")


    /** KUBEJS STUFF **/
   // modImplementation("curse.maven:rhino-416294:${rhino_file}")
   // modImplementation("curse.maven:architecturyforge-419699:${architectury_file}")
  //  modImplementation("curse.maven:kubejs-238086:${kubejs_file}")
//    modImplementation("curse.maven:top-245211:${top_file}")
}

jar {
    zip64 true
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "GregTech Intergalactical",
                "Specification-Version": project.version,
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "GregTech Intergalactical",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'antimatter.mixins.json'
            ])
    }
}
publishing {
    tasks.publish.dependsOn 'build', 'reobfJar'
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        if (isCI && isRELEASE) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/GregTech-Intergalactical/GregTech"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        } else {
            maven { url "file:///${project.projectDir}/mcmodsrepo"}
        }
    }
}


//jar.finalizedBy('reobfJar')
/*configurations.compile {
    exclude group: 'it.unimi.dsi', module: 'fastutil'
}*/

/*shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier ''
}*/

//jar.classifier = 'nodep'
